

相关问题：

知识点1:
脉冲怎么转化为速度

公式：
速度=脉冲数量(进一次定时器中断)*60/4倍频/电机的分辨率/减速比/定时器的周期

或者可以写成这样：

速度=脉冲数量(进一次定时器中断)*60/(4倍频*电机的分辨率*减速比*定时器的周期)

利用上面公式算出来的速度单位是rpm/r(每分钟电机转多少圈)

这里的脉冲数不是累计脉冲数。

知识点2：

走直线的距离怎么转换成脉冲数

公式：

脉冲数=(距离(单位为cm)/(2派R))*(减速比*4倍频*分辨率)  
其中派可以取：3.14  , R：为小车轮子半径。
这里的脉冲是指累计脉冲数，

知识点3：

小车如何实现转弯：

轮距：接地两个轮子之间的距离

现在我们实现转90度的弯

spin90_val = 0.25*3.1416*轮距    (0.25-->90度，其他角度为：转的角度/360)
这样我们就得到要转90度，则一个轮子需要转的距离

然后将距离转换成脉冲数用上面走直线距离变脉冲的公式据可以了。

最后我们需要让一个轮子正向走90度距离和一个轮子反向走90度距离实现小车转90度。

如果是转其他角度同理。

知识点4：

如何将脉冲转化成距离：

首先我们需要将每次进入定时器的脉冲数累计起来，但是我们这里要特别注意，我们每实现一次需要走的固定距离
之后都需要将累积的脉冲数清零，(走固定距离之前清零，走之后也要清零)。

举个例：
		g_lMotorPulseSigma += g_nMotorPulse;//位置外环使用的脉冲累积      //完成一次位置控制之后才清除。
		g_lMotor2PulseSigma += g_nMotor2Pulse;//位置外环使用的脉冲累积   //记录了之后也要及时清零呀！！！
			
		Motor_journey_cm	  = ( g_lMotorPulseSigma /(30*13*4) ) * (6.5*3.14);
		Motor2_journey_cm	=  ( g_lMotor2PulseSigma /(30*13*4) ) * (6.5*3.14);
		
其中各变量所代表的意义：
g_lMotorPulseSigma 为累计 g_nMotorPulse的脉冲数

g_lMotor2PulseSigma 为累计 g_nMotor2Pulse的脉冲数

g_nMotorPulse为每次进入定时器所获得脉冲数

g_nMotor2Pulse为每次进入定时器所获得脉冲数

Motor_journey_cm ：这个变量是指当小车已经开始实现走固定距离时，将累计的脉冲数转变成距离保存起来，
当走到固定距离时，小车停下来。

公式为(和距离变脉冲公式相反):
距离 = (累计的脉冲数/(减速比*4倍频*分辨率))*(2派R)
其中派可以取：3.14  , R：为小车轮子半径。



避障部分
小车避障的方法与小车的结构有关，需要看是前驱车还是后驱车，两者同一个代码转弯效果不一样，前驱车避障看起来丝滑一些，
而后驱避障看起来会有点别扭。





//		switch(start)
//		{
//			case 0:
//				start++;
//				Car_go(65);

//			break;
//            
//			case 1:
//                if(Stop_Flag==1)//直走完成之后的停止位
//                {			
//                    start++;
//                    spin_Turn(right_90);
//                }
//				//Set_Pwm(0,0);//完成任务时，不需要Set_Pwm(0,0);因为上面有一个start++,如果加了这个函数会导致小车走的时候一卡一卡的，wc这个问题直接让我无语了
//			break;
//                
//            case 2:
//                if(Spin_succeed_flag==1)//转弯成功标志位
//                {
//                    start++;
//                    Car_go(50);
//                }
//			break;
//                
//            case 3:
//            if(Stop_Flag==1)//转弯成功标志位
//            {
//                spin_Turn(right_90);
//            }
//			break;
           
//		}

